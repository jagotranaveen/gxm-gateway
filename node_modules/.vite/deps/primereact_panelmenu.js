"use client";
import {
  ChevronRightIcon
} from "./chunk-LSFXF2NM.js";
import {
  ChevronDownIcon
} from "./chunk-4BJMDYVL.js";
import {
  CSSTransition
} from "./chunk-LXF54Q7U.js";
import {
  Ripple
} from "./chunk-7MK4L7BY.js";
import "./chunk-JKK7IRW4.js";
import "./chunk-PBXWVHXV.js";
import {
  ComponentBase,
  useHandleStyle,
  useMergeProps,
  useMountEffect
} from "./chunk-T7OPBGWB.js";
import {
  DomHandler,
  IconUtils,
  ObjectUtils,
  PrimeReactContext,
  UniqueComponentId,
  classNames
} from "./chunk-BF2AS7HP.js";
import {
  require_react
} from "./chunk-4HAMFFQC.js";
import {
  __toESM
} from "./chunk-EQCVQC35.js";

// node_modules/primereact/panelmenu/panelmenu.esm.js
var React = __toESM(require_react());
function _extends() {
  _extends = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}
function _typeof(o) {
  "@babel/helpers - typeof";
  return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o2) {
    return typeof o2;
  } : function(o2) {
    return o2 && "function" == typeof Symbol && o2.constructor === Symbol && o2 !== Symbol.prototype ? "symbol" : typeof o2;
  }, _typeof(o);
}
function _toPrimitive(input, hint) {
  if (_typeof(input) !== "object" || input === null) return input;
  var prim = input[Symbol.toPrimitive];
  if (prim !== void 0) {
    var res = prim.call(input, hint || "default");
    if (_typeof(res) !== "object") return res;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (hint === "string" ? String : Number)(input);
}
function _toPropertyKey(arg) {
  var key = _toPrimitive(arg, "string");
  return _typeof(key) === "symbol" ? key : String(key);
}
function _defineProperty(obj, key, value) {
  key = _toPropertyKey(key);
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}
function _arrayWithHoles(arr) {
  if (Array.isArray(arr)) return arr;
}
function _iterableToArrayLimit(r, l) {
  var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"];
  if (null != t) {
    var e, n, i, u, a = [], f = true, o = false;
    try {
      if (i = (t = t.call(r)).next, 0 === l) {
        if (Object(t) !== t) return;
        f = false;
      } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = true) ;
    } catch (r2) {
      o = true, n = r2;
    } finally {
      try {
        if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return;
      } finally {
        if (o) throw n;
      }
    }
    return a;
  }
}
function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];
  return arr2;
}
function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}
function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _slicedToArray(arr, i) {
  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
}
var classes = {
  headerIcon: function headerIcon(_ref) {
    var item = _ref.item;
    return classNames("p-menuitem-icon", item.icon);
  },
  headerSubmenuIcon: "p-submenu-icon",
  headerLabel: "p-menuitem-text",
  headerAction: "p-panelmenu-header-link",
  panel: function panel(_ref2) {
    var item = _ref2.item;
    return classNames("p-panelmenu-panel", item.className);
  },
  header: function header(_ref3) {
    var active = _ref3.active, item = _ref3.item;
    return classNames("p-component p-panelmenu-header", {
      "p-highlight": active && !!item.items,
      "p-disabled": item.disabled
    });
  },
  headerContent: "p-panelmenu-header-content",
  menuContent: "p-panelmenu-content",
  root: "p-panelmenu p-component",
  separator: "p-menuitem-separator",
  toggleableContent: function toggleableContent(_ref4) {
    var active = _ref4.active;
    return classNames("p-toggleable-content", {
      "p-toggleable-content-collapsed": !active
    });
  },
  icon: function icon(_ref5) {
    var item = _ref5.item;
    return classNames("p-menuitem-icon", item.icon);
  },
  label: "p-menuitem-text",
  submenuicon: "p-submenu-icon",
  content: "p-menuitem-content",
  action: function action(_ref6) {
    var item = _ref6.item;
    return classNames("p-menuitem-link", {
      "p-disabled": item.disabled
    });
  },
  menuitem: function menuitem(_ref7) {
    var item = _ref7.item, focused = _ref7.focused, disabled = _ref7.disabled;
    return classNames("p-menuitem", item.className, {
      "p-focus": focused,
      "p-disabled": disabled
    });
  },
  menu: "p-panelmenu-root-list",
  submenu: "p-submenu-list",
  transition: "p-toggleable-content"
};
var styles = "\n@layer primereact {\n    .p-panelmenu .p-panelmenu-header-link {\n        display: flex;\n        align-items: center;\n        user-select: none;\n        cursor: pointer;\n        position: relative;\n        text-decoration: none;\n    }\n\n    .p-panelmenu .p-panelmenu-header-link:focus {\n        z-index: 1;\n    }\n\n    .p-panelmenu .p-submenu-list {\n        margin: 0;\n        padding: 0;\n        list-style: none;\n    }\n\n    .p-panelmenu .p-menuitem-link {\n        display: flex;\n        align-items: center;\n        user-select: none;\n        cursor: pointer;\n        text-decoration: none;\n        text-decoration: none;\n        position: relative;\n        overflow: hidden;\n    }\n\n    .p-panelmenu .p-menuitem-text {\n        line-height: 1;\n    }\n}\n";
var PanelMenuBase = ComponentBase.extend({
  defaultProps: {
    __TYPE: "PanelMenu",
    id: null,
    model: null,
    style: null,
    submenuIcon: null,
    expandedKeys: null,
    className: null,
    onExpandedKeysChange: null,
    onOpen: null,
    onClose: null,
    multiple: false,
    transitionOptions: null,
    children: void 0
  },
  css: {
    classes,
    styles
  }
});
var useUpdateEffect = function useUpdateEffect2(fn, deps) {
  var mounted = React.useRef(false);
  return React.useEffect(function() {
    if (!mounted.current) {
      mounted.current = true;
      return;
    }
    return fn && fn();
  }, deps);
};
function ownKeys$2(e, r) {
  var t = Object.keys(e);
  if (Object.getOwnPropertySymbols) {
    var o = Object.getOwnPropertySymbols(e);
    r && (o = o.filter(function(r2) {
      return Object.getOwnPropertyDescriptor(e, r2).enumerable;
    })), t.push.apply(t, o);
  }
  return t;
}
function _objectSpread$2(e) {
  for (var r = 1; r < arguments.length; r++) {
    var t = null != arguments[r] ? arguments[r] : {};
    r % 2 ? ownKeys$2(Object(t), true).forEach(function(r2) {
      _defineProperty(e, r2, t[r2]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$2(Object(t)).forEach(function(r2) {
      Object.defineProperty(e, r2, Object.getOwnPropertyDescriptor(t, r2));
    });
  }
  return e;
}
var PanelMenuSub = React.memo(React.forwardRef(function(props, ref) {
  var mergeProps = useMergeProps();
  var ptm = props.ptm, cx = props.cx;
  var elementRef = React.useRef(null);
  var _ptm = function _ptm2(key, options) {
    return ptm(key, _objectSpread$2({
      hostName: props.hostName
    }, options));
  };
  var getPTOptions = function getPTOptions2(processedItem, key, index) {
    return _ptm(key, {
      context: {
        item: processedItem,
        index,
        active: isItemActive(processedItem),
        focused: isItemFocused(processedItem),
        disabled: isItemDisabled(processedItem)
      }
    });
  };
  var getItemId = function getItemId2(processedItem) {
    return "".concat(props.panelId, "_").concat(processedItem.key);
  };
  var getItemProp = function getItemProp2(processedItem, name, params) {
    return processedItem && processedItem.item ? ObjectUtils.getItemValue(processedItem.item[name], params) : void 0;
  };
  var isItemActive = function isItemActive2(processedItem) {
    var _processedItem$item;
    return props.activeItemPath && props.activeItemPath.some(function(path) {
      return path.key === processedItem.key;
    }) || !!((_processedItem$item = processedItem.item) !== null && _processedItem$item !== void 0 && _processedItem$item.expanded);
  };
  var isItemVisible = function isItemVisible2(processedItem) {
    return getItemProp(processedItem, "visible") !== false;
  };
  var isItemDisabled = function isItemDisabled2(processedItem) {
    return getItemProp(processedItem, "disabled");
  };
  var isItemFocused = function isItemFocused2(processedItem) {
    return props.focusedItemId === getItemId(processedItem);
  };
  var isItemGroup = function isItemGroup2(processedItem) {
    return ObjectUtils.isNotEmpty(processedItem.items);
  };
  var onItemClick = function onItemClick2(event, processedItem) {
    if (!getItemProp(processedItem, "url")) {
      event.preventDefault();
    }
    getItemProp(processedItem, "command", {
      originalEvent: event,
      item: processedItem.item
    });
    onItemToggle({
      processedItem,
      expanded: !isItemActive(processedItem)
    });
  };
  var onItemToggle = function onItemToggle2(event) {
    props.onItemToggle(event);
  };
  var getAriaSetSize = function getAriaSetSize2() {
    return props.model.filter(function(processedItem) {
      return isItemVisible(processedItem) && !getItemProp(processedItem, "separator");
    }).length;
  };
  var getAriaPosInset = function getAriaPosInset2(index) {
    return index - props.model.slice(0, index).filter(function(processedItem) {
      return isItemVisible(processedItem) && getItemProp(processedItem, "separator");
    }).length + 1;
  };
  React.useImperativeHandle(ref, function() {
    return {
      getElement: function getElement() {
        return elementRef.current;
      }
    };
  });
  var createSeparator = function createSeparator2(index) {
    var key = props.id + "_sep_" + index;
    var separatorProps = mergeProps({
      id: key,
      key,
      className: cx("separator"),
      role: "separator"
    }, _ptm("separator"));
    return React.createElement("li", separatorProps);
  };
  var createSubmenu = function createSubmenu2(processedItem, active) {
    var submenuRef = React.createRef();
    var toggleableContentProps = mergeProps({
      className: cx("toggleableContent", {
        active
      })
    }, _ptm("toggleableContent"));
    if (isItemVisible(processedItem) && isItemGroup(processedItem)) {
      var transitionProps = mergeProps({
        classNames: cx("transition"),
        timeout: {
          enter: 1e3,
          exit: 450
        },
        "in": active,
        unmountOnExit: true
      }, _ptm("transition"));
      return React.createElement(CSSTransition, _extends({
        nodeRef: submenuRef
      }, transitionProps), React.createElement("div", _extends({
        ref: submenuRef
      }, toggleableContentProps), React.createElement(PanelMenuSub, {
        id: getItemId(processedItem) + "_list",
        role: "group",
        panelId: props.panelId,
        level: props.level + 1,
        focusedItemId: props.focusedItemId,
        activeItemPath: props.activeItemPath,
        onItemToggle,
        menuProps: props.menuProps,
        model: processedItem.items,
        submenuIcon: props.submenuIcon,
        ptm,
        cx
      })));
    }
    return null;
  };
  var createMenuItem = function createMenuItem2(processedItem, index) {
    var item = processedItem.item;
    if (isItemVisible(processedItem) === false) {
      return null;
    }
    var key = getItemId(processedItem);
    var active = isItemActive(processedItem);
    var itemFocused = isItemFocused(processedItem);
    var disabled = isItemDisabled(item);
    var linkClassName = classNames("p-menuitem-link", {
      "p-disabled": item.disabled
    });
    var iconClassName = classNames("p-menuitem-icon", item.icon);
    var iconProps = mergeProps({
      className: cx("icon", {
        item
      })
    }, getPTOptions(processedItem, "icon", index));
    var icon2 = IconUtils.getJSXIcon(item.icon, _objectSpread$2({}, iconProps), {
      props: props.menuProps
    });
    var labelProps = mergeProps({
      className: cx("label")
    }, getPTOptions(processedItem, "label", index));
    var label = item.label && React.createElement("span", labelProps, item.label);
    var submenuIconClassName = "p-panelmenu-icon";
    var submenuIconProps = mergeProps({
      className: cx("submenuicon")
    }, getPTOptions(processedItem, "submenuicon", index));
    var submenuIcon = item.items && IconUtils.getJSXIcon(active ? props.submenuIcon || React.createElement(ChevronDownIcon, submenuIconProps) : props.submenuIcon || React.createElement(ChevronRightIcon, submenuIconProps));
    var submenu = createSubmenu(processedItem, active);
    var actionProps = mergeProps({
      href: item.url || "#",
      className: cx("action", {
        item
      }),
      target: item.target,
      onFocus: function onFocus(event) {
        return event.stopPropagation();
      },
      tabIndex: "-1",
      "aria-hidden": true
    }, getPTOptions(processedItem, "action", index));
    var content = React.createElement("a", actionProps, submenuIcon, icon2, label, React.createElement(Ripple, null));
    if (item.template) {
      var defaultContentOptions = {
        className: linkClassName,
        labelClassName: "p-menuitem-text",
        iconClassName,
        submenuIconClassName,
        element: content,
        props,
        leaf: !item.items,
        active
      };
      content = ObjectUtils.getJSXElement(item.template, item, defaultContentOptions);
    }
    var contentProps = mergeProps({
      onClick: function onClick(event) {
        return onItemClick(event, processedItem);
      },
      className: cx("content")
    }, getPTOptions(processedItem, "content", index));
    var menuitemProps = mergeProps({
      key,
      id: key,
      className: cx("menuitem", {
        item,
        focused: itemFocused,
        disabled
      }),
      style: item.style,
      role: "treeitem",
      "aria-label": item.label,
      "aria-expanded": isItemGroup(item) ? active : void 0,
      "aria-level": props.level + 1,
      "aria-setsize": getAriaSetSize(),
      "aria-posinset": getAriaPosInset(index),
      "data-p-focused": itemFocused,
      "data-p-disabled": disabled
    }, getPTOptions(processedItem, "menuitem", index));
    return React.createElement("li", menuitemProps, React.createElement("div", contentProps, content), submenu);
  };
  var createItem = function createItem2(item, index) {
    return getItemProp(item, "separator") ? createSeparator(index) : createMenuItem(item, index);
  };
  var createMenu = function createMenu2() {
    return props.model ? props.model.map(createItem) : null;
  };
  var menu = createMenu();
  var ptKey = props.root ? "menu" : "submenu";
  var menuProps = mergeProps({
    id: props.id,
    ref: elementRef,
    tabIndex: props.tabIndex,
    onFocus: props.onFocus,
    onBlur: props.onBlur,
    onKeyDown: props.onKeyDown,
    "aria-activedescendant": props.ariaActivedescendant,
    role: props.role,
    className: classNames(cx(ptKey), props.className)
  }, ptm(ptKey));
  return React.createElement("ul", menuProps, menu);
}));
PanelMenuSub.displayName = "PanelMenuSub";
function ownKeys$1(e, r) {
  var t = Object.keys(e);
  if (Object.getOwnPropertySymbols) {
    var o = Object.getOwnPropertySymbols(e);
    r && (o = o.filter(function(r2) {
      return Object.getOwnPropertyDescriptor(e, r2).enumerable;
    })), t.push.apply(t, o);
  }
  return t;
}
function _objectSpread$1(e) {
  for (var r = 1; r < arguments.length; r++) {
    var t = null != arguments[r] ? arguments[r] : {};
    r % 2 ? ownKeys$1(Object(t), true).forEach(function(r2) {
      _defineProperty(e, r2, t[r2]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$1(Object(t)).forEach(function(r2) {
      Object.defineProperty(e, r2, Object.getOwnPropertyDescriptor(t, r2));
    });
  }
  return e;
}
var PanelMenuList = React.memo(function(props) {
  var ptm = props.ptm, cx = props.cx;
  var _React$useState = React.useState(false), _React$useState2 = _slicedToArray(_React$useState, 2), focused = _React$useState2[0], setFocused = _React$useState2[1];
  var _React$useState3 = React.useState(null), _React$useState4 = _slicedToArray(_React$useState3, 2), focusedItem = _React$useState4[0], setFocusedItem = _React$useState4[1];
  var _React$useState5 = React.useState(null), _React$useState6 = _slicedToArray(_React$useState5, 2), focusedItemId = _React$useState6[0], setFocusedItemId = _React$useState6[1];
  var _React$useState7 = React.useState([]), _React$useState8 = _slicedToArray(_React$useState7, 2), activeItemPath = _React$useState8[0], setActiveItemPath = _React$useState8[1];
  var _React$useState9 = React.useState(null), _React$useState10 = _slicedToArray(_React$useState9, 2), processedItems = _React$useState10[0], setProcessedItems = _React$useState10[1];
  var _React$useState11 = React.useState([]), _React$useState12 = _slicedToArray(_React$useState11, 2), visibleItems = _React$useState12[0], setVisibleItems = _React$useState12[1];
  var searchValue = React.useRef(null);
  var searchTimeout = React.useRef(null);
  var elementRef = React.useRef(null);
  var getItemProp = function getItemProp2(processedItem, name) {
    return processedItem && processedItem.item ? ObjectUtils.getItemValue(processedItem.item[name]) : void 0;
  };
  var getItemLabel = function getItemLabel2(processedItem) {
    return getItemProp(processedItem, "label");
  };
  var isItemVisible = function isItemVisible2(processedItem) {
    return getItemProp(processedItem, "visible") !== false;
  };
  var isItemDisabled = function isItemDisabled2(processedItem) {
    return getItemProp(processedItem, "disabled");
  };
  var isItemActive = function isItemActive2(processedItem) {
    return activeItemPath && activeItemPath.some(function(path) {
      return path.key === processedItem.parentKey;
    });
  };
  var isItemGroup = function isItemGroup2(processedItem) {
    return ObjectUtils.isNotEmpty(processedItem.items);
  };
  var getListElement = function getListElement2() {
    return elementRef.current && elementRef.current.getElement();
  };
  var onFocus = function onFocus2(event) {
    setFocused(true);
    var _focusedItem = focusedItem || (isElementInPanel(event, event.relatedTarget) ? findFirstItem() : findLastItem());
    setFocusedItem(_focusedItem);
  };
  var onBlur = function onBlur2() {
    setFocused(false);
    setFocusedItem(null);
    searchValue.current = "";
  };
  var onKeyDown = function onKeyDown2(event) {
    var metaKey = event.metaKey || event.ctrlKey;
    switch (event.code) {
      case "ArrowDown":
        onArrowDownKey(event);
        break;
      case "ArrowUp":
        onArrowUpKey(event);
        break;
      case "ArrowLeft":
        onArrowLeftKey(event);
        break;
      case "ArrowRight":
        onArrowRightKey(event);
        break;
      case "Home":
        onHomeKey(event);
        break;
      case "End":
        onEndKey(event);
        break;
      case "Space":
        onSpaceKey(event);
        break;
      case "Enter":
      case "NumpadEnter":
        onEnterKey(event);
        break;
      case "Escape":
      case "Tab":
      case "PageDown":
      case "PageUp":
      case "Backspace":
      case "ShiftLeft":
      case "ShiftRight":
        break;
      default:
        if (!metaKey && ObjectUtils.isPrintableCharacter(event.key)) {
          searchItems(event, event.key);
        }
        break;
    }
  };
  var onArrowDownKey = function onArrowDownKey2(event) {
    var processedItem = ObjectUtils.isNotEmpty(focusedItem) ? findNextItem(focusedItem) : findFirstItem();
    changeFocusedItem({
      originalEvent: event,
      processedItem,
      focusOnNext: true
    });
    event.preventDefault();
  };
  var onArrowUpKey = function onArrowUpKey2(event) {
    var processedItem = ObjectUtils.isNotEmpty(focusedItem) ? findPrevItem(focusedItem) : findLastItem();
    changeFocusedItem({
      originalEvent: event,
      processedItem,
      selfCheck: true
    });
    event.preventDefault();
  };
  var onArrowLeftKey = function onArrowLeftKey2(event) {
    if (ObjectUtils.isNotEmpty(focusedItem)) {
      var matched = activeItemPath.some(function(p) {
        return p.key === focusedItem.key;
      });
      if (matched) {
        setActiveItemPath(activeItemPath.filter(function(p) {
          return p.key !== focusedItem.key;
        }));
      } else {
        setFocusedItem(ObjectUtils.isNotEmpty(focusedItem.parent) ? focusedItem.parent : focusedItem);
      }
      event.preventDefault();
    }
  };
  var onArrowRightKey = function onArrowRightKey2(event) {
    if (ObjectUtils.isNotEmpty(focusedItem)) {
      var grouped = isItemGroup(focusedItem);
      if (grouped) {
        var matched = activeItemPath.some(function(p) {
          return p.key === focusedItem.key;
        });
        if (matched) {
          onArrowDownKey(event);
        } else {
          var _activeItemPath = activeItemPath.filter(function(p) {
            return p.parentKey !== focusedItem.parentKey;
          });
          _activeItemPath.push(focusedItem);
          setActiveItemPath(_activeItemPath);
        }
      }
      event.preventDefault();
    }
  };
  var onHomeKey = function onHomeKey2(event) {
    changeFocusedItem({
      originalEvent: event,
      processedItem: findFirstItem(),
      allowHeaderFocus: false
    });
    event.preventDefault();
  };
  var onEndKey = function onEndKey2(event) {
    changeFocusedItem({
      originalEvent: event,
      processedItem: findLastItem(),
      focusOnNext: true,
      allowHeaderFocus: false
    });
    event.preventDefault();
  };
  var onEnterKey = function onEnterKey2(event) {
    if (ObjectUtils.isNotEmpty(focusedItem)) {
      var element = DomHandler.findSingle(getListElement(), 'li[id="'.concat("".concat(focusedItemId), '"]'));
      var anchorElement = element && (DomHandler.findSingle(element, '[data-pc-section="action"]') || DomHandler.findSingle(element, "a,button"));
      anchorElement ? anchorElement.click() : element && element.click();
    }
    event.preventDefault();
  };
  var onSpaceKey = function onSpaceKey2(event) {
    onEnterKey(event);
  };
  var onItemToggle = function onItemToggle2(event) {
    var processedItem = event.processedItem, expanded = event.expanded;
    if (props.expandedKeys) {
      props.onToggle && props.onToggle({
        item: processedItem.item,
        expanded
      });
    } else {
      var _activeItemPath = activeItemPath.filter(function(p) {
        return p.parentKey !== processedItem.parentKey;
      });
      expanded && _activeItemPath.push(processedItem);
      setActiveItemPath(_activeItemPath);
    }
    if (processedItem.item) {
      processedItem.item = _objectSpread$1(_objectSpread$1({}, processedItem.item), {}, {
        expanded
      });
    }
    DomHandler.focus(getListElement());
    setFocusedItem(processedItem);
  };
  var isElementInPanel = function isElementInPanel2(event, element) {
    var panel2 = event.currentTarget.closest('[data-pc-section="panel"]');
    return panel2 && panel2.contains(element);
  };
  var isItemMatched = function isItemMatched2(processedItem) {
    return isValidItem(processedItem) && getItemLabel(processedItem).toLocaleLowerCase().startsWith(searchValue.current.toLocaleLowerCase());
  };
  var isVisibleItem = function isVisibleItem2(processedItem) {
    return !!processedItem && (processedItem.level === 0 || isItemActive(processedItem)) && isItemVisible(processedItem);
  };
  var isValidItem = function isValidItem2(processedItem) {
    return !!processedItem && !isItemDisabled(processedItem) && !getItemProp(processedItem, "separator");
  };
  var findFirstItem = function findFirstItem2() {
    return visibleItems.find(function(processedItem) {
      return isValidItem(processedItem);
    });
  };
  var findLastItem = function findLastItem2() {
    return ObjectUtils.findLast(visibleItems, function(processedItem) {
      return isValidItem(processedItem);
    });
  };
  var findNextItem = function findNextItem2(processedItem) {
    var index = visibleItems.findIndex(function(item) {
      return item.key === processedItem.key;
    });
    var matchedItem = index < visibleItems.length - 1 ? visibleItems.slice(index + 1).find(function(pItem) {
      return isValidItem(pItem);
    }) : void 0;
    return matchedItem || processedItem;
  };
  var findPrevItem = function findPrevItem2(processedItem) {
    var index = visibleItems.findIndex(function(item) {
      return item.key === processedItem.key;
    });
    var matchedItem = index > 0 ? ObjectUtils.findLast(visibleItems.slice(0, index), function(pItem) {
      return isValidItem(pItem);
    }) : void 0;
    return matchedItem || processedItem;
  };
  var searchItems = function searchItems2(event, _char) {
    searchValue.current = (searchValue.current || "") + _char;
    var matchedItem = null;
    var matched = false;
    if (ObjectUtils.isNotEmpty(focusedItem)) {
      var focusedItemIndex = visibleItems.findIndex(function(processedItem) {
        return processedItem.key === focusedItem.key;
      });
      matchedItem = visibleItems.slice(focusedItemIndex).find(function(processedItem) {
        return isItemMatched(processedItem);
      });
      matchedItem = ObjectUtils.isEmpty(matchedItem) ? visibleItems.slice(0, focusedItemIndex).find(function(processedItem) {
        return isItemMatched(processedItem);
      }) : matchedItem;
    } else {
      matchedItem = visibleItems.find(function(processedItem) {
        return isItemMatched(processedItem);
      });
    }
    if (ObjectUtils.isNotEmpty(matchedItem)) {
      matched = true;
    }
    if (ObjectUtils.isEmpty(matchedItem) && ObjectUtils.isEmpty(focusedItem)) {
      matchedItem = findFirstItem();
    }
    if (ObjectUtils.isNotEmpty(matchedItem)) {
      changeFocusedItem({
        originalEvent: event,
        processedItem: matchedItem,
        allowHeaderFocus: false
      });
    }
    if (searchTimeout) {
      clearTimeout(searchTimeout.current);
    }
    searchTimeout.current = setTimeout(function() {
      searchValue.current = "";
      searchTimeout.currentt = null;
    }, 500);
    return matched;
  };
  var changeFocusedItem = function changeFocusedItem2(event) {
    var originalEvent = event.originalEvent, processedItem = event.processedItem, focusOnNext = event.focusOnNext, selfCheck = event.selfCheck, _event$allowHeaderFoc = event.allowHeaderFocus, allowHeaderFocus = _event$allowHeaderFoc === void 0 ? true : _event$allowHeaderFoc;
    if (ObjectUtils.isNotEmpty(focusedItem) && focusedItem.key !== processedItem.key) {
      setFocusedItem(processedItem);
      scrollInView();
    } else if (allowHeaderFocus) {
      props.onHeaderFocus && props.onHeaderFocus({
        originalEvent,
        focusOnNext,
        selfCheck
      });
    }
  };
  var scrollInView = function scrollInView2() {
    var element = DomHandler.findSingle(getListElement(), 'li[id="'.concat("".concat(focusedItemId), '"]'));
    if (element) {
      element.scrollIntoView && element.scrollIntoView({
        block: "nearest",
        inline: "start"
      });
    }
  };
  var autoUpdateActiveItemPath = function autoUpdateActiveItemPath2(expandedKeys) {
    var _activeItemPath = Object.entries(expandedKeys || {}).reduce(function(acc, _ref) {
      var _ref2 = _slicedToArray(_ref, 2), key = _ref2[0], val = _ref2[1];
      if (val) {
        var processedItem = findProcessedItemByItemKey(key);
        processedItem && acc.push(processedItem);
      }
      return acc;
    }, []);
    setActiveItemPath(_activeItemPath);
  };
  var findProcessedItemByItemKey = function findProcessedItemByItemKey2(key, processed) {
    var level = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 0;
    var _processedItems = processed ? processed : level === 0 && props.model;
    if (!_processedItems) {
      return null;
    }
    for (var i = 0; i < _processedItems.length; i++) {
      var processedItem = _processedItems[i];
      var processedKey = getItemProp(processedItem, "key") || processedItem.key;
      if (processedKey === key) {
        return processedItem;
      }
      var matchedItem = findProcessedItemByItemKey2(key, processedItem.items, level + 1);
      if (matchedItem) {
        return matchedItem;
      }
    }
  };
  var createProcessedItems = function createProcessedItems2(items) {
    var level = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;
    var parent = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
    var parentKey = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : "";
    var processedItems2 = [];
    items && items.forEach(function(item, index) {
      var key = item.key ? item.key : (parentKey !== "" ? parentKey + "_" : "") + index;
      var newItem = {
        item,
        index,
        level,
        key,
        parent,
        parentKey
      };
      newItem.items = createProcessedItems2(item.items, level + 1, newItem, key);
      processedItems2.push(newItem);
    });
    return processedItems2;
  };
  var flatItems = function flatItems2(processedItems2) {
    var processedFlattenItems = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];
    processedItems2 && processedItems2.forEach(function(processedItem) {
      if (isVisibleItem(processedItem)) {
        processedFlattenItems.push(processedItem);
        flatItems2(processedItem.items, processedFlattenItems);
      }
    });
    return processedFlattenItems;
  };
  React.useEffect(function() {
    var processed = createProcessedItems(props.model);
    setProcessedItems(processed);
  }, [props.model]);
  React.useEffect(function() {
    var _visibleItems = flatItems(processedItems);
    setVisibleItems(_visibleItems);
  }, [processedItems, activeItemPath]);
  React.useEffect(function() {
    autoUpdateActiveItemPath(props.expandedKeys);
  }, [props.expandedKeys]);
  useUpdateEffect(function() {
    var _id = ObjectUtils.isNotEmpty(focusedItem) ? "".concat(props.panelId, "_").concat(focusedItem.key) : null;
    setFocusedItemId(_id);
  }, [props.panelId, focusedItem]);
  return React.createElement(PanelMenuSub, {
    hostName: "PanelMenu",
    id: props.panelId + "_list",
    ref: elementRef,
    role: "tree",
    tabIndex: -1,
    ariaActivedescendant: focused ? focusedItemId : void 0,
    panelId: props.panelId,
    focusedItemId: focused ? focusedItemId : void 0,
    model: processedItems,
    activeItemPath,
    menuProps: props.menuProps,
    onFocus,
    onBlur,
    onKeyDown,
    onItemToggle,
    level: 0,
    className: cx("submenu"),
    submenuIcon: props.submenuIcon,
    root: true,
    ptm,
    cx
  });
});
PanelMenuList.displayName = "PanelMenuList";
function ownKeys(e, r) {
  var t = Object.keys(e);
  if (Object.getOwnPropertySymbols) {
    var o = Object.getOwnPropertySymbols(e);
    r && (o = o.filter(function(r2) {
      return Object.getOwnPropertyDescriptor(e, r2).enumerable;
    })), t.push.apply(t, o);
  }
  return t;
}
function _objectSpread(e) {
  for (var r = 1; r < arguments.length; r++) {
    var t = null != arguments[r] ? arguments[r] : {};
    r % 2 ? ownKeys(Object(t), true).forEach(function(r2) {
      _defineProperty(e, r2, t[r2]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function(r2) {
      Object.defineProperty(e, r2, Object.getOwnPropertyDescriptor(t, r2));
    });
  }
  return e;
}
var PanelMenu = React.memo(React.forwardRef(function(inProps, ref) {
  var mergeProps = useMergeProps();
  var context = React.useContext(PrimeReactContext);
  var props = PanelMenuBase.getProps(inProps, context);
  var _React$useState = React.useState(props.id), _React$useState2 = _slicedToArray(_React$useState, 2), idState = _React$useState2[0], setIdState = _React$useState2[1];
  var _React$useState3 = React.useState(null), _React$useState4 = _slicedToArray(_React$useState3, 2), activeItemState = _React$useState4[0], setActiveItemState = _React$useState4[1];
  var _React$useState5 = React.useState([]), _React$useState6 = _slicedToArray(_React$useState5, 2), activeItemsState = _React$useState6[0], setActiveItemsState = _React$useState6[1];
  var _React$useState7 = React.useState(false), _React$useState8 = _slicedToArray(_React$useState7, 2);
  _React$useState8[0];
  var setAnimationDisabled = _React$useState8[1];
  var elementRef = React.useRef(null);
  var _PanelMenuBase$setMet = PanelMenuBase.setMetaData({
    props,
    state: {
      id: idState,
      activeItem: activeItemState
    }
  }), ptm = _PanelMenuBase$setMet.ptm, cx = _PanelMenuBase$setMet.cx, isUnstyled = _PanelMenuBase$setMet.isUnstyled;
  useHandleStyle(PanelMenuBase.css.styles, isUnstyled, {
    name: "panelmenu"
  });
  var onItemClick = function onItemClick2(event, item) {
    if (item.disabled) {
      event.preventDefault();
      return;
    }
    if (item.command) {
      item.command({
        originalEvent: event,
        item
      });
    }
    if (item.items) {
      changeActiveItem(event, item);
    }
    if (!item.url) {
      event.preventDefault();
      event.stopPropagation();
    }
  };
  var getItemProp = function getItemProp2(item, name) {
    return item ? ObjectUtils.getItemValue(item[name]) : void 0;
  };
  var isItemActive = function isItemActive2(item) {
    if (props.expandedKeys) {
      return props.expandedKeys[getItemProp(item, "key")];
    }
    return props.multiple ? activeItemsState.some(function(subItem) {
      return ObjectUtils.equals(item, subItem);
    }) : ObjectUtils.equals(item, activeItemState);
  };
  var isItemVisible = function isItemVisible2(item) {
    return getItemProp(item, "visible") !== false;
  };
  var isItemDisabled = function isItemDisabled2(item) {
    return getItemProp(item, "disabled");
  };
  var isItemFocused = function isItemFocused2(item) {
    return ObjectUtils.equals(item, activeItemState);
  };
  var generatePanelId = function generatePanelId2(index) {
    return "".concat(idState, "_").concat(index);
  };
  var generateHeaderId = function generateHeaderId2(itemId, index) {
    return "".concat(itemId || generatePanelId(index), "_header");
  };
  var generateContentId = function generateContentId2(itemId, index) {
    return "".concat(itemId || generatePanelId(index), "_content");
  };
  var onHeaderKeyDown = function onHeaderKeyDown2(event, item) {
    switch (event.code) {
      case "ArrowDown":
        onHeaderArrowDownKey(event);
        break;
      case "ArrowUp":
        onHeaderArrowUpKey(event);
        break;
      case "Home":
        onHeaderHomeKey(event);
        break;
      case "End":
        onHeaderEndKey(event);
        break;
      case "Enter":
      case "NumpadEnter":
      case "Space":
        onHeaderEnterKey(event, item);
        break;
    }
  };
  var onHeaderArrowDownKey = function onHeaderArrowDownKey2(event) {
    var rootList = DomHandler.getAttribute(event.currentTarget, "data-p-highlight") === true ? DomHandler.findSingle(event.currentTarget.nextElementSibling, '[data-pc-section="menu"]') : null;
    rootList ? DomHandler.focus(rootList) : updateFocusedHeader({
      originalEvent: event,
      focusOnNext: true
    });
    event.preventDefault();
  };
  var onHeaderArrowUpKey = function onHeaderArrowUpKey2(event) {
    var prevHeader = findPrevHeader(event.currentTarget.parentElement) || findLastHeader();
    var rootList = DomHandler.getAttribute(prevHeader, "data-p-highlight") === true ? DomHandler.findSingle(prevHeader.nextElementSibling, '[data-pc-section="menu"]') : null;
    rootList ? DomHandler.focus(rootList) : updateFocusedHeader({
      originalEvent: event,
      focusOnNext: false
    });
    event.preventDefault();
  };
  var onHeaderHomeKey = function onHeaderHomeKey2(event) {
    changeFocusedHeader(event, findFirstHeader());
    event.preventDefault();
  };
  var onHeaderEndKey = function onHeaderEndKey2(event) {
    changeFocusedHeader(event, findLastHeader());
    event.preventDefault();
  };
  var onHeaderEnterKey = function onHeaderEnterKey2(event, item) {
    var headerAction = DomHandler.findSingle(event.currentTarget, '[data-pc-section="headeraction"]');
    headerAction ? headerAction.click() : onItemClick(event, item);
    event.preventDefault();
  };
  var findNextHeader = function findNextHeader2(panelElement) {
    var selfCheck = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
    var nextPanelElement = selfCheck ? panelElement : panelElement.nextElementSibling;
    var headerElement = DomHandler.findSingle(nextPanelElement, '[data-pc-section="header"]');
    return headerElement ? DomHandler.getAttribute(headerElement, "data-p-disabled") ? findNextHeader2(headerElement.parentElement) : headerElement : null;
  };
  var findPrevHeader = function findPrevHeader2(panelElement) {
    var selfCheck = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
    var prevPanelElement = selfCheck ? panelElement : panelElement.previousElementSibling;
    var headerElement = DomHandler.findSingle(prevPanelElement, '[data-pc-section="header"]');
    return headerElement ? DomHandler.getAttribute(headerElement, "data-p-disabled") ? findPrevHeader2(headerElement.parentElement) : headerElement : null;
  };
  var findFirstHeader = function findFirstHeader2() {
    return findNextHeader(elementRef.current.firstElementChild, true);
  };
  var findLastHeader = function findLastHeader2() {
    return findPrevHeader(elementRef.current.lastElementChild, true);
  };
  var updateFocusedHeader = function updateFocusedHeader2(event) {
    var originalEvent = event.originalEvent, focusOnNext = event.focusOnNext, selfCheck = event.selfCheck;
    var panelElement = originalEvent.currentTarget.closest('[data-pc-section="panel"]');
    var header2 = selfCheck ? DomHandler.findSingle(panelElement, '[data-pc-section="header"]') : focusOnNext ? findNextHeader(panelElement) : findPrevHeader(panelElement);
    header2 ? changeFocusedHeader(originalEvent, header2) : focusOnNext ? onHeaderHomeKey(originalEvent) : onHeaderEndKey(originalEvent);
  };
  var changeActiveItem = function changeActiveItem2(event, item) {
    if (!isItemDisabled(item)) {
      var active = isItemActive(item);
      var isExpanded = !active;
      var _activeItemState = activeItemState && ObjectUtils.equals(item, activeItemState) ? null : item;
      setActiveItemState(_activeItemState);
      if (props.multiple) {
        var activeItems = activeItemsState;
        if (activeItemsState.some(function(subItem) {
          return ObjectUtils.equals(item, subItem);
        })) {
          activeItems = activeItemsState.filter(function(subItem) {
            return !ObjectUtils.equals(item, subItem);
          });
        } else {
          activeItems.push(item);
        }
        setActiveItemsState(activeItems);
      }
      changeExpandedKeys({
        item,
        expanded: isExpanded
      });
      isExpanded && event ? props.onOpen && props.onOpen({
        originalEvent: event,
        item
      }) : props.onClose && props.onClose({
        originalEvent: event,
        item
      });
    }
  };
  var changeExpandedKeys = function changeExpandedKeys2(_ref) {
    var item = _ref.item, _ref$expanded = _ref.expanded, expanded = _ref$expanded === void 0 ? false : _ref$expanded;
    if (props.expandedKeys) {
      var _keys = _objectSpread({}, props.expandedKeys);
      if (expanded) {
        _keys[item.key] = true;
      } else {
        delete _keys[item.key];
      }
      props.onExpandedKeysChange && props.onExpandedKeysChange(_keys);
    }
  };
  var changeFocusedHeader = function changeFocusedHeader2(event, element) {
    element && DomHandler.focus(element);
  };
  var getPTOptions = function getPTOptions2(item, key, index) {
    return ptm(key, {
      context: {
        active: isItemActive(item),
        focused: isItemFocused(item),
        disabled: isItemDisabled(item),
        index
      }
    });
  };
  React.useImperativeHandle(ref, function() {
    return {
      props,
      getElement: function getElement() {
        return elementRef.current;
      }
    };
  });
  useMountEffect(function() {
    !idState && setIdState(UniqueComponentId());
  });
  React.useEffect(function() {
    setAnimationDisabled(true);
    props.model && props.model.forEach(function(item) {
      if (item.expanded) {
        changeActiveItem(null, item);
      }
    });
  }, [props.model]);
  var onEnter = function onEnter2() {
    setAnimationDisabled(false);
  };
  var createPanel = function createPanel2(item, index) {
    if (!isItemVisible(item)) {
      return null;
    }
    var key = item.id || idState + "_" + index;
    var active = isItemActive(item);
    var iconClassName = classNames("p-menuitem-icon", item.icon);
    var headerIconProps = mergeProps({
      className: cx("headerIcon", {
        item
      })
    }, getPTOptions(item, "headerIcon", index));
    var icon2 = IconUtils.getJSXIcon(item.icon, _objectSpread({}, headerIconProps), {
      props
    });
    var submenuIconClassName = "p-panelmenu-icon";
    var headerSubmenuIconProps = mergeProps({
      className: cx("headerSubmenuIcon")
    }, getPTOptions(item, "headerSubmenuIcon", index));
    var submenuIcon = item.items && IconUtils.getJSXIcon(active ? props.submenuIcon || React.createElement(ChevronDownIcon, headerSubmenuIconProps) : props.submenuIcon || React.createElement(ChevronRightIcon, headerSubmenuIconProps));
    var headerLabelProps = mergeProps({
      className: cx("headerLabel")
    }, getPTOptions(item, "headerLabel", index));
    var label = item.label && React.createElement("span", headerLabelProps, item.label);
    var menuContentRef = React.createRef();
    var headerActionProps = mergeProps({
      href: item.url || "#",
      tabIndex: "-1",
      className: cx("headerAction")
    }, getPTOptions(item, "headerAction", index));
    var content = React.createElement("a", headerActionProps, submenuIcon, icon2, label);
    if (item.template) {
      var defaultContentOptions = {
        onClick: function onClick(event) {
          return onItemClick(event, item);
        },
        className: "p-panelmenu-header-link",
        labelClassName: "p-menuitem-text",
        submenuIconClassName,
        iconClassName,
        element: content,
        props,
        leaf: !item.items,
        active
      };
      content = ObjectUtils.getJSXElement(item.template, item, defaultContentOptions);
    }
    var panelProps = mergeProps({
      key,
      id: (item === null || item === void 0 ? void 0 : item.id) || generatePanelId(index),
      className: cx("panel", {
        item
      }),
      style: item.style
    }, getPTOptions(item, "panel", index));
    var headerProps = mergeProps({
      id: generateHeaderId(item === null || item === void 0 ? void 0 : item.id, index),
      className: cx("header", {
        active,
        item
      }),
      "aria-label": item.label,
      "aria-expanded": active,
      "aria-disabled": item.disabled,
      "aria-controls": generateContentId(item === null || item === void 0 ? void 0 : item.id, index),
      tabIndex: item.disabled ? null : "0",
      onClick: function onClick(event) {
        return onItemClick(event, item);
      },
      onKeyDown: function onKeyDown(event) {
        return onHeaderKeyDown(event, item);
      },
      "data-p-disabled": item.disabled,
      "data-p-highlight": active,
      role: "button",
      style: item.style
    }, getPTOptions(item, "header", index));
    var headerContentProps = mergeProps({
      className: cx("headerContent")
    }, getPTOptions(item, "headerContent", index));
    var menuContentProps = mergeProps({
      className: cx("menuContent")
    }, getPTOptions(item, "menuContent", index));
    var toggleableContentProps = mergeProps({
      className: cx("toggleableContent", {
        active
      }),
      role: "region",
      "aria-labelledby": generateHeaderId(item === null || item === void 0 ? void 0 : item.id, index)
    }, getPTOptions(item, "toggleableContent", index));
    var transitionProps = mergeProps({
      classNames: cx("transition"),
      timeout: {
        enter: 1e3,
        exit: 450
      },
      onEnter,
      "in": active,
      unmountOnExit: true,
      options: props.transitionOptions
    }, getPTOptions(item, "transition", index));
    return React.createElement("div", panelProps, React.createElement("div", headerProps, React.createElement("div", headerContentProps, content)), React.createElement(CSSTransition, _extends({
      nodeRef: menuContentRef
    }, transitionProps), React.createElement("div", _extends({
      id: generateContentId(item === null || item === void 0 ? void 0 : item.id, index),
      ref: menuContentRef
    }, toggleableContentProps), React.createElement("div", menuContentProps, React.createElement(PanelMenuList, {
      panelId: (item === null || item === void 0 ? void 0 : item.id) || generatePanelId(index),
      menuProps: props,
      onToggle: changeExpandedKeys,
      onHeaderFocus: updateFocusedHeader,
      level: 0,
      model: item.items,
      expandedKeys: props.expandedKeys,
      className: "p-panelmenu-root-submenu",
      submenuIcon: props.submenuIcon,
      ptm,
      cx
    })))));
  };
  var createPanels = function createPanels2() {
    return props.model ? props.model.map(createPanel) : null;
  };
  var panels = createPanels();
  var rootProps = mergeProps({
    ref: elementRef,
    className: classNames(props.className, cx("root")),
    id: props.id,
    style: props.style
  }, PanelMenuBase.getOtherProps(props), ptm("root"));
  return React.createElement("div", rootProps, panels);
}));
PanelMenu.displayName = "PanelMenu";
export {
  PanelMenu
};
//# sourceMappingURL=primereact_panelmenu.js.map
